package wasi:http@0.3.0-rc-2025-09-16;

/// The `wasi:http/imports` world imports all the APIs for HTTP services.
/// It is intended to be `include`d in other worlds.
world imports {
  /// HTTP services have access to time and randomness.
  include wasi:clocks/imports@0.3.0-rc-2025-09-16;
  import wasi:random/random@0.3.0-rc-2025-09-16;

  /// Services have standard output and error streams which are expected to
  /// terminate in a developer-facing console provided by the host.
  import wasi:cli/stdout@0.3.0-rc-2025-09-16;
  import wasi:cli/stderr@0.3.0-rc-2025-09-16;

  /// TODO: this is a temporary workaround until component tooling is able to
  /// gracefully handle the absence of stdin. Hosts must return an eof stream
  /// for this import, which is what wasi-libc + tooling will do automatically
  /// when this import is properly removed.
  import wasi:cli/stdin@0.3.0-rc-2025-09-16;

  /// This is the default `client` to use when user code simply wants to make an
  /// HTTP request (e.g., via `fetch()`).
  import client;
}

/// The `wasi:http/service` world captures a broad category of HTTP services
/// including web applications, API servers, and proxies. It may be `include`d
/// in more specific worlds such as `wasi:http/gateway`.
world service {
  include imports;

  /// The host delivers incoming HTTP requests to a component by calling the
  /// `handle` function of this exported interface. A host may arbitrarily reuse
  /// or not reuse component instance when delivering incoming HTTP requests and
  /// thus a component must be able to handle 0..N calls to `handle`.
  ///
  /// This may also be used to receive synthesized or forwarded requests from
  /// another component.
  export handler;
}

/// The `wasi:http/middleware` world captures HTTP services that forward HTTP
/// Requests to another handler. Components may implement this world to allow
/// them to participate in handler "chains" where a Request flows through
/// handlers on its way to some "terminal" service and corresponding Responses
/// flow in the opposite direction.
world middleware {
  include service;
  import handler;
}